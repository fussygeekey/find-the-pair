{"version":3,"sources":["App.js","index.js"],"names":["chosenTile","isSearching","openedTiles","steps","Tile","props","style","height","width","margin","background","border","borderRadius","display","transition","cursor","onClick","event","tile","target","bgcolor","setTimeout","alert","Board","boardInner","randomColor","randomIndex","arrayOfTiles","Array","i","Math","floor","random","getArrayOfTiles","padding","backgroundColor","boxShadow","position","left","top","transform","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8KAgCA,IAAIA,EACAC,GAAc,EACdC,EAAc,EACdC,EAAQ,EAEZ,SAASC,EAAKC,GAaV,OACI,qBAAKC,MAbS,CACdC,OAAQ,IACRC,MAAO,IACPC,OAAQ,GACRC,WAAY,cACZC,OAAQ,oBACRC,aAAc,EACdC,QAAS,eACTC,WAAY,OACZC,OAAQ,WAIeC,QAAS,SAACC,GAC7B,IAAIC,EAAOD,EAAME,OAEY,eAAzBD,EAAKZ,MAAMI,aACXP,IACAe,EAAKZ,MAAMI,WAAaL,EAAMe,QAE9BC,YAAW,WACHpB,GACAA,GAAc,EAEViB,EAAKZ,MAAMI,YAAcV,EAAWM,MAAMI,WAGvB,KAFnBR,GAAe,IAGXoB,MAAM,+BAAiCnB,EAAQ,OAInDe,EAAKZ,MAAMI,WAAa,cACxBV,EAAWM,MAAMI,WAAa,iBAIlCV,EAAakB,EACbjB,GAAc,KAEnB,SAMnB,SAASsB,IACL,IAYIC,EAxFR,WAKI,IAJA,IACIC,EAUAC,EAXAC,EAAe,IAAIC,MAIdC,EAAI,EAAGA,EAAI,GAAIA,GAAK,EACzBJ,EAXQ,OAHFK,KAAKC,MAAsB,IAAhBD,KAAKE,UAGC,KAFfF,KAAKC,MAAsB,IAAhBD,KAAKE,UAEc,KAD/BF,KAAKC,MAAsB,IAAhBD,KAAKE,UAC6B,IAapDL,EAAaE,GAAK,cAACzB,EAAD,CAAMgB,QAASK,IACjCE,EAAaE,EAAI,GAAK,cAACzB,EAAD,CAAMgB,QAASK,IAMzC,IAAK,IAAII,EAAI,GAAIA,EAAI,EAAGA,IAAK,OAEsB,CAACF,EADhDD,EAAcI,KAAKC,MAAMD,KAAKE,UAAYH,EAAI,KAC6BF,EAAaE,IAAvFF,EAAaE,GAFW,KAEPF,EAAaD,GAFN,KAK7B,OAAOC,EAoEUM,GAEjB,OACI,qBAAK3B,MAfU,CACfE,MAAO,IACP0B,QAAS,EACTC,gBAAiB,QACjBC,UAAW,8BACXxB,aAAc,EACdyB,SAAU,QACVC,KAAM,MACNC,IAAK,MACLC,UAAW,yBAMX,SACKhB,IAWEiB,MANf,WACI,OACI,cAAClB,EAAD,KCvGRmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.c8559199.chunk.js","sourcesContent":["function getRandomColor() {\n    let red = Math.floor(Math.random() * 256),\n        green = Math.floor(Math.random() * 256),\n        blue = Math.floor(Math.random() * 256),\n        color = 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n\n    return color;\n}\n\nfunction getArrayOfTiles() {\n    let arrayOfTiles = new Array(),\n        randomColor;\n\n    // Array initialization\n    for (let i = 0; i < 16; i += 2) {\n        randomColor = getRandomColor();\n\n        arrayOfTiles[i] = <Tile bgcolor={randomColor} />;\n        arrayOfTiles[i + 1] = <Tile bgcolor={randomColor} />;\n    }\n\n    let randomIndex;\n\n    // Array mixing\n    for (let i = 16; i > 0; i--) {\n        randomIndex = Math.floor(Math.random() * (i + 1));\n        [arrayOfTiles[i], arrayOfTiles[randomIndex]] = [arrayOfTiles[randomIndex], arrayOfTiles[i]]; // Swapping elements\n    }\n\n    return arrayOfTiles;\n}\n\nlet chosenTile,\n    isSearching = false,\n    openedTiles = 0,\n    steps = 0;\n\nfunction Tile(props) {\n    const tileStyle = {\n        height: 100,\n        width: 100,\n        margin: 10,\n        background: 'transparent',\n        border: '1px solid #DADADA',\n        borderRadius: 5,\n        display: 'inline-block',\n        transition: '0.5s',\n        cursor: 'pointer'\n    };\n\n    return (\n        <div style={tileStyle} onClick={(event) => {\n            let tile = event.target;\n\n            if (tile.style.background == 'transparent') {\n                steps++;\n                tile.style.background = props.bgcolor;\n\n                setTimeout(() => {\n                    if (isSearching) {\n                        isSearching = false;\n\n                        if (tile.style.background == chosenTile.style.background) {\n                            openedTiles += 2;\n                            \n                            if (openedTiles == 16) {\n                                alert('You won! Quantity of steps: ' + steps + '. ');\n                            }\n                        }\n                        else {\n                            tile.style.background = 'transparent';\n                            chosenTile.style.background = 'transparent';\n                        }\n                    }\n                    else {\n                        chosenTile = tile;\n                        isSearching = true;\n                    }\n                }, 500);\n            }\n        }}></div>\n    );\n}\n\nfunction Board() {\n    const boardStyle = {\n        width: 480,\n        padding: 0,\n        backgroundColor: 'white',\n        boxShadow: '0 0 10px rgba(0, 0, 0, 0.5)',\n        borderRadius: 5,\n        position: 'fixed',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)'\n    };\n\n    let boardInner = getArrayOfTiles();\n\n    return (\n        <div style={boardStyle}>\n            {boardInner}\n        </div>\n    );\n}\n\nfunction App() {\n    return (\n        <Board />\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}