[{"D:\\Projects\\test-react-app\\src\\index.js":"1","D:\\Projects\\test-react-app\\src\\App.js":"2"},{"size":219,"mtime":1609761820318,"results":"3","hashOfConfig":"4"},{"size":2916,"mtime":1609764053483,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"xnfbs2",{"filePath":"9","messages":"10","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"D:\\Projects\\test-react-app\\src\\index.js",[],["12","13"],"D:\\Projects\\test-react-app\\src\\App.js",["14","15","16","17"],"function getRandomColor() {\n    let red = Math.floor(Math.random() * 256),\n        green = Math.floor(Math.random() * 256),\n        blue = Math.floor(Math.random() * 256),\n        color = 'rgb(' + red + ', ' + green + ', ' + blue + ')';\n\n    return color;\n}\n\nfunction getArrayOfTiles() {\n    let arrayOfTiles = new Array(),\n        randomColor;\n\n    // Array initialization\n    for (let i = 0; i < 16; i += 2) {\n        randomColor = getRandomColor();\n\n        arrayOfTiles[i] = <Tile bgcolor={randomColor} />;\n        arrayOfTiles[i + 1] = <Tile bgcolor={randomColor} />;\n    }\n\n    let randomIndex;\n\n    // Array mixing\n    for (let i = 16; i > 0; i--) {\n        randomIndex = Math.floor(Math.random() * (i + 1));\n        [arrayOfTiles[i], arrayOfTiles[randomIndex]] = [arrayOfTiles[randomIndex], arrayOfTiles[i]]; // Swapping elements\n    }\n\n    return arrayOfTiles;\n}\n\nlet chosenTile,\n    isSearching = false,\n    openedTiles = 0,\n    steps = 0;\n\nfunction Tile(props) {\n    const tileStyle = {\n        height: 100,\n        width: 100,\n        margin: 10,\n        background: 'transparent',\n        border: '1px solid #DADADA',\n        borderRadius: 5,\n        display: 'inline-block',\n        transition: '0.5s',\n        cursor: 'pointer'\n    };\n\n    return (\n        <div style={tileStyle} onClick={(event) => {\n            let tile = event.target;\n\n            if (tile.style.background == 'transparent') {\n                steps++;\n                tile.style.background = props.bgcolor;\n\n                setTimeout(() => {\n                    if (isSearching) {\n                        isSearching = false;\n\n                        if (tile.style.background == chosenTile.style.background) {\n                            openedTiles += 2;\n                            \n                            if (openedTiles == 16) {\n                                alert('You won! Quantity of steps: ' + steps + '. ');\n                            }\n                        }\n                        else {\n                            tile.style.background = 'transparent';\n                            chosenTile.style.background = 'transparent';\n                        }\n                    }\n                    else {\n                        chosenTile = tile;\n                        isSearching = true;\n                    }\n                }, 500);\n            }\n        }}></div>\n    );\n}\n\nfunction Board() {\n    const boardStyle = {\n        width: 480,\n        padding: 0,\n        backgroundColor: 'white',\n        boxShadow: '0 0 10px rgba(0, 0, 0, 0.5)',\n        borderRadius: 5,\n        position: 'fixed',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)'\n    };\n\n    let boardInner = getArrayOfTiles();\n\n    return (\n        <div style={boardStyle}>\n            {boardInner}\n        </div>\n    );\n}\n\nfunction App() {\n    return (\n        <Board />\n    );\n}\n\nexport default App;",{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","severity":1,"message":"23","line":11,"column":24,"nodeType":"24","messageId":"25","endLine":11,"endColumn":35},{"ruleId":"26","severity":1,"message":"27","line":55,"column":39,"nodeType":"28","messageId":"29","endLine":55,"endColumn":41},{"ruleId":"26","severity":1,"message":"27","line":63,"column":51,"nodeType":"28","messageId":"29","endLine":63,"endColumn":53},{"ruleId":"26","severity":1,"message":"27","line":66,"column":45,"nodeType":"28","messageId":"29","endLine":66,"endColumn":47},"no-native-reassign",["30"],"no-negated-in-lhs",["31"],"no-array-constructor","The array literal notation [] is preferable.","NewExpression","preferLiteral","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]